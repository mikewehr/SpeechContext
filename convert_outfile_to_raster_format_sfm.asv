function convert_outfile_to_raster_format_sfm(datadir)
% convert outfile to raster format
% numargs = nargin(convert_outfile_to_raster_format_sfm);
% 
% if numargs == 0
%     datadir = 'D:\lab\djmaus\Data\sfm\synthetic_SpeechContext_data\Group6';   %Enter directory of OUTfiles to be converted - SFM 7/14/21
%     datadir = cell(datadir);
%     fprintf('No input argument of outfile directories passed into function. Using manually entered dirs %s', datadir{1})
% elseif numargs == 1
%     datadir = cell(datadir);
% else numargs > 1;
%     tempdatadir = cell();
%         for k = 1:length(nargin)
%             tempdatadir{k} = numargs{k};
%         end
%     datadir = tempdatadir;
% end

datadir = 'D:\lab\djmaus\Data\sfm\synthetic_SpeechContext_data\Group6';
for j = 1:length(datadir)
    aindex = 2;
    dindex = 2;
    cd(datadir)
    d = dir('outPSTH*.mat');
    for i = 1:length(d)
        fprintf('\ncell %d of %d', i, length(d))
        outfilename = d(i).name;
        load(outfilename)
        cellid = outfilename(9:end-4);

        %%
        TotalStims = 0;
        if exist('out.stimlogs', 'var') == 1
            NumberOfStimlogs = length(out.stimlogs);
            for i = 1:NumberOfStimlogs
                NewStims = length(out.stimlogs{1,i});
                TotalStims = TotalStims + NewStims;
            end
        else
            TotalStims = length(out.stimlog);
        end

        GrandStimlog = {};
        if exist('out.stimlogs', 'var') == 1
            GrandStimlog = horzcat(out.stimlogs{1:NumberOfStimlogs});
        else 
            GrandStimlog = out.stimlog;
        end

        fullnames = cell(1, length(GrandStimlog));
        for m = 1:length(GrandStimlog)
            fullnames{m} = GrandStimlog(m).stimulus_description;
        end

        NumExpStims = (size(out.M1OFF, 1) * size(out.M1OFF, 4));        
        pathlabel = cell(1, NumExpStims);
        k = 0;    % This is the mechanism that filters out whitenoise and silentsound stims and only collects test stimuli - SFM 7/21/21
        for i = 1:TotalStims
            presplit = split(fullnames{i}, ':');
            if isequal(presplit{1},'whitenoise laser')
               %pathlabel{i} = 'whitenoise'; 
            elseif isequal(presplit{1},'silentsound laser')
               %pathlabel{i} = 'silentsound'; 
            else
                k = k + 1;
                presort = split(presplit{2}, ' ');
                pathlabel{k} = presort{1};
            end
        end
        clear presplit
        clear presort
        clear k

        %% 

        clear raster_labels
        clear raster_site_info
        clear raster_size 
        % This fixes the issue of each cell having mismatching data - SFM 7/22/21

        xlimits = out.xlimits;
        num_trials = out.nrepsOFF(:,aindex, dindex);
        num_time_points = out.samprate * (1/1000) * (xlimits(2) - xlimits(1));

        % M1OFF: [30×2×2×100 struct]

        % count actual num_trials
        num_trials = 0;
        for stimID = 1:out.numsourcefiles
            nr = out.nrepsOFF(stimID, aindex, dindex);
            for rep = 1:nr
                num_trials = num_trials+1;
            end
        end

        %this is the point of discrepancy between number of stimuli and length
        %of stimlog, OUTfiles have been made to ignore whitenoise or silent
        %sound control conditions so any neural decoding must also discard
        %those elements and only use stimuli that have a .mat file (phonemes
        %or previously created stimuli) and not autogenerated by djamus control
        %conditions - SFM 7/21/21

        raster_data = zeros(num_trials, round(num_time_points));
        r = 0;
        for stimID = 1:out.numsourcefiles
            nr = out.nrepsOFF(stimID, aindex, dindex);
            for rep = 1:nr
                r = r+1;
                spiketimes = out.M1OFF(stimID, aindex, dindex, rep).spiketimes;
                spiketimes = spiketimes - xlimits(1); 
                %convert ms spiketimes to raster format (samples)
                spiketimes_rast = 1 + round(spiketimes * out.samprate/1000);

                raster_data(r, spiketimes_rast) = 1; 
                raster_labels.sourcefile{r} = pathlabel{r};
            end
        end   

        raster_site_info.IL = out.IL;
        raster_site_info.Nclusters = out.Nclusters;
        raster_site_info.channel = out.channel;
        raster_site_info.cell = out.cell;
        raster_site_info.xlimits = out.xlimits;
        raster_site_info.amps = out.amps;
        raster_site_info.durs = out.durs;
        raster_site_info.sourcefiles = out.sourcefiles;
        raster_site_info.numamps = out.numamps;
        raster_site_info.numsourcefiles = out.numsourcefiles;
        raster_site_info.numdurs = out.numdurs;
        raster_site_info.samprate = out.samprate;
        raster_site_info.datadir = out.datadir;
        raster_site_info.outfilename = outfilename;
        raster_site_info.nb = out.nb;
        raster_site_info.stimlog = out.stimlog;
        raster_site_info.run_on = datestr(now);
        raster_site_info.generated_by = mfilename;
        raster_site_info.alignment_event_time = -xlimits(1) * out.samprate/1000;

        datadirstr = strsplit(string(datadir), '\');                           %strsplit(out.datadir, '\'); %SFM 8/2/21 to make this work for synthetic data
        raster_filename = sprintf('%s_%s_raster_data', datadirstr{6}, cellid); %datadirstr{end} - SFM 8/2/21
%         if length(datadir) > 1
%             rasterdirname = strcat(datadir{1}, '\raster_files');
%         else
        rasterdirname = strcat(datadir, '\raster_files');
%         end
        if ~exist(rasterdirname, 'dir')
           mkdir raster_files; 
        end
        cd raster_files

    %     save(raster_filename, 'raster_data', 'raster_labels', 'raster_site_info') % - Original, but the file can be over 2GB, so let's save it betterly.
    %     SFM's Compression (LOSSLESS):

        [I] = find(raster_data);
        raster_size = size(raster_data);
        save(raster_filename, 'I', 'raster_size', 'raster_labels', 'raster_site_info')

    %     Sam's decompression (to be used in whatever the script is that loads the raster files:
    %     load(raster_filename);
    %     raster_data = zeros(raster_size);
    %     raster_data(I) = 1; 

        cd(datadir)
    end
end
    
    
    
    
    
    
    